/*
 ======================================================================================================================
 MEIValidator.cpp

 Created on: Apr 9, 2019
 Author: Mark Meadows

 A driver for the
 MEI Validator

 Comm setup is 9600 E 7 1
 No Flow Control
 =======================================================================================================================
 */
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <ctype.h>
#include <SerialStream.h>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdint>
#include <bits/stdc++.h>    // for strcpy
#include <array>            // for array copy
#include <iostream>
#include <vector>
#include <SerialPort.h>
#include "mei_driver.h"
#include "../hdr/global.h"
#include "../trim.inc"
#include "../logs.inc"
#include <mysql.h>          //ONLY NEEDED TO PUT CASH IN DATABASE DIRECTLY WILL BE REMOVED IN THE FUTURE
#include <netinet/in.h>
#include <sys/un.h>
#include <sys/socket.h>



using namespace std;
using namespace LibSerial;

SerialStream mei_my_serial; //THIS MUST BE ABOVE THE CLASS TO KEEP IT GLOBAL!

//Version of the Driver//KEEP THIS GLOBAL ALSO
	string get_mei_driver_version(void){
		return "ver 00.01.09";
	}
/*
===============================================================================================================================
Global Variables
===============================================================================================================================
 */
	string mei_query_type = "status";
	string old_mei_rply1;
	float mei_invntry;
/*
===============================================================================================================================
Start of the MEI Class
===============================================================================================================================
*/

	class mei {

/*
===============================================================================================================================
Connect to MEI Validator
===============================================================================================================================
*/
private:
char mei_buffer[200];
int mei_status;

public:
bool mei_detected;
string mei_portname;
bool detected=false;
int mei_instance;

public:
		mei(string pname, int instance) //MARK YOUR WORKING HERE !!!
		{
			mei_detected=false;
			mei_portname=pname;
			mei_instance = instance;
			mei_connect();
		}

		~mei(void)
		{
            printf("\nCloseing Comm port!\n");
			if (mei_my_serial)
            mei_my_serial.Close();
			mei_detected=false;
		}

		// returns detected status
		bool isdetected(void)
		{
			return mei_detected;
		}
/*
===========================================================================================================================
Connect to MEI Validator Returns 1 on success 0 on fail
===========================================================================================================================
 */
public:

	int mei_connect(void)
		{

		   int res;
		   int sock = socket(AF_UNIX, SOCK_STREAM, 0);
		   char out_buff[250] = {0};
		   char domainsocket_Name[250] = {0};
		   struct sockaddr_un address;
		   memset(&address, 0x00, sizeof(address));
		   address.sun_family = AF_UNIX;
           strncpy(domainsocket_Name,"/var/run/mei_command1.socket",28); //IM doing this so I can easily  put in the instance number
		   strncpy(address.sun_path, domainsocket_Name, strlen(domainsocket_Name));


		   res = connect(sock,(struct sockaddr *)&address, sizeof(address));

		return(1);
		}


/*
===============================================================================================================================
 Connection to MEI Validator Completed
===============================================================================================================================
Private function check the connection status if connection haas been lost try to reconnect
===============================================================================================================================
*/
private:

bool mei_check_connection(void)
{

	if (mei_detected)
		return true;
	else
	{
		mssleep(2000);
		mei_connect();
	}
	return detected;
}
/*
===============================================================================================================================
MEI Validator Setup processed after the Comm port connection is made
===============================================================================================================================
 */
private:

void mei_setup(void)
{
	string mei_rply ="";
	printf("MEI Validator model is a %s \n",mei_rply.c_str());
	mei_detected = true;
	return;
}
/*
================================================================================================================================
end of MEI Setup
================================================================================================================================

===============================================================================================================================
Add Inventory to the MYSQL database
===============================================================================================================================
*/
public: //For now this is public so I can test it

void mei_add_to_inventory_database(float value, int therow )
{

	MYSQL* conn;
	MYSQL_RES *results;
	MYSQL_ROW row;
    float total;
	float currenttotal;
    printf("The Value = %f the Row is %d", value, therow);


	conn = mysql_init(NULL);
	conn = mysql_real_connect(conn,"localhost","fkinguser101","glimpbust345","fking",0,NULL,0);
	 if(conn)
	        cout<<"connection to fking databse successful "<<endl;
	     else
	        cout<<"connection problem: "<<mysql_error(conn)<<endl;

	 if(mysql_query(conn, "SELECT * FROM inventory WHERE id = 1"))
	 	{
	 		printf("mysql: selection error: %s\n", mysql_error(conn));
	 		mysql_close(conn);
	 	}
	  results = mysql_use_result(conn);
      row = mysql_fetch_row(results);
	  printf("%s %s %s %s %s %s %s %s\n", row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7]);
	  //currenttotal = row[therow];
	  //total = currenttotal + value;
	  printf("\nthe total is %f\n",total);
	  mysql_query(conn, "UPDATE `fking`.`inventory` SET `field_1`='2.00' WHERE `id`='1'");




	  mysql_free_result(results);
	  mysql_close(conn);

	  return;

}
/*
==============================================================================================================================
End of Database Work c
==============================================================================================================================
*/
};
/*
===============================================================================================================================
End of MEI Class
===============================================================================================================================
 */




















