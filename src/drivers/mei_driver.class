/*
 ======================================================================================================================
 MEIValidator.cpp

 Created on: Apr 9, 2019
 Author: Mark Meadows

 A driver for the
 MEI Validator

 Comm setup is 9600 E 7 1
 No Flow Control
 =======================================================================================================================
 */
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <ctype.h>
#include <SerialStream.h>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cstdint>
#include <bits/stdc++.h>    // for strcpy
#include <array>            // for array copy
#include <iostream>
#include <vector>
#include <SerialPort.h>
#include "mei_driver.h"
#include "../hdr/global.h"
#include "../trim.inc"
#include "../logs.inc"
#include <mysql.h>          //ONLY NEEDED TO PUT CASH IN DATABASE DIRECTLY WILL BE REMOVED IN THE FUTURE
#include <netinet/in.h>
#include <sys/un.h>
#include <sys/socket.h>



using namespace std;
using namespace LibSerial;

SerialStream mei_my_serial; //THIS MUST BE ABOVE THE CLASS TO KEEP IT GLOBAL!

//Version of the Driver//KEEP THIS GLOBAL ALSO
	string get_mei_driver_version(void){
		return "ver 00.01.09";
	}
/*
===============================================================================================================================
Global Variables
===============================================================================================================================
 */
	string mei_query_type = "status";
	string old_mei_rply1;
	float mei_invntry;
/*
===============================================================================================================================
Start of the MEI Class
===============================================================================================================================
*/

	class mei {

/*
===============================================================================================================================
Connect to MEI Validator
===============================================================================================================================
*/
private:
char mei_buffer[200];
int mei_status;

public:
bool mei_detected;
string mei_portname;//Port name sent from usb_gateway to the mei driver
bool detected=false;
int mei_instance; //Current Number of the current process



public:
		mei(string pname, int instance)
		{
			mei_detected=false;
			mei_portname=pname;
			mei_instance = instance;
			int result;
			result = system("/home/mark/git/mei_service/mei_service/Debug/mei_service /dev/ttyUSB0 1 &\n");//TODO This needs to come from config
			mei_connect();
		}

		~mei(void)
		{

			mei_send_command("stop");
			printf("\nCloseing Comm port!\n");
			mei_detected=false;
			printf("MEI Service shut down cleanly...\n");
		}

		// returns detected status
		bool isdetected(void)
		{
			return mei_detected;
		}
/*
===========================================================================================================================
Connect to MEI Validator Returns 1 on success 0 on fail
===========================================================================================================================
 */
public:

	int mei_connect(void)
		{
/*
=====================================================================================================================================
Connection Test to MEI Service
=====================================================================================================================================
 */
		   int res; //Command Socket
		   int timeout = 0;
		   int sock = socket(AF_UNIX, SOCK_STREAM, 0);
		   char domainsocket_Name[250] = {0};
		   struct sockaddr_un address;
		   memset(&address, 0x00, sizeof(address));
		   address.sun_family = AF_UNIX;
           strncpy(domainsocket_Name,"/var/run/mei_command1.socket",28); //IM doing this so I can easily  put in the instance number
		   strncpy(address.sun_path, domainsocket_Name, strlen(domainsocket_Name));//TODO Need to domainsocket_name to integrate session number
		do
		{
		   res = connect(sock,(struct sockaddr *)&address, sizeof(address));

		if (timeout > 50 )
			{
			printf("timeout on mei server socket connection\n");
			return(0);
			}

		usleep(100000);//Important Delay.
		timeout++;

		}
		while(res < 0);

		res = write(sock, "model", 5); // request model of MEI
		close(sock);
		printf("connected to MEI Command Service...\n");
/*
=========================================================================================================================================
End of connection test
=========================================================================================================================================
Connect to response Side of service
=========================================================================================================================================
*/
		           int stx; //Response Socket
				   sock = socket(AF_UNIX, SOCK_STREAM, 0);
		           memset(&address, 0x00, sizeof(address));
		           address.sun_family = AF_UNIX;
		           timeout = 0; //Reset timeout
		           bzero(domainsocket_Name,250); //Clear out domainsocket_Name so I can give it a new one
		           strncpy(domainsocket_Name,"/var/run/mei_response1.socket",29); //IM doing this so I can easily  put in the instance number
				   strncpy(address.sun_path, domainsocket_Name, strlen(domainsocket_Name));//TODO Need to domainsocket_name to integrate session number
				do
				{
				   stx = connect(sock,(struct sockaddr *)&address, sizeof(address));

				if (timeout > 50 )
					{
					printf("timeout on mei response server socket connection\n");
					return(0);
					}

				usleep(100000);//Important Delay.
				timeout++;

				}
				while(stx < 0);
				int rval;
				char buf[1024] = {0};
				rval = read(sock, buf, 1024);

				close(sock);
				printf("connected to MEI Response Server... reply when asked for Model was %s\n",buf);
/*
=========================================================================================================================================
Connection to MEI Service Complete
=========================================================================================================================================
 */
return(1);
}
/*
=========================================================================================================================================
 Connection to MEI Validator Completed
=========================================================================================================================================
MEI Send Command
=========================================================================================================================================
*/
public:

	int	mei_send_command(string command)
	{
	//printf("MEI Driver RXed %s as the command\n",command.c_str());//DEBUG
	int res; //Command Socket
	int timeout = 0;
	int sock = socket(AF_UNIX, SOCK_STREAM, 0);
	char domainsocket_Name[250] = {0};
	struct sockaddr_un address;
	memset(&address, 0x00, sizeof(address));
	address.sun_family = AF_UNIX;
	strncpy(domainsocket_Name,"/var/run/mei_command1.socket",28); //IM doing this so I can easily  put in the instance number
	strncpy(address.sun_path, domainsocket_Name, strlen(domainsocket_Name));//TODO Need to domainsocket_name to integrate session number
			do
			{
			   res = connect(sock,(struct sockaddr *)&address, sizeof(address));

			if (timeout > 50 )
				{
				printf("timeout mei server socket connection\n");
				return(0);
				}

			usleep(100000);//Important Delay.
			timeout++;

			}
			while(res < 0);

	char the_command[250] = {0};
	strcpy(the_command,command.c_str());
	res = write(sock, the_command, strlen(the_command)); // send requested command
	close(sock);
	return(1);

}
/*
=========================================================================================================================================
  End of MEI Send Command
===========================================================================================================================================
MEI Return Response
===========================================================================================================================================
 */
public:

	string	mei_get_response(void) //Get waiting response from mei_service
{

	int stx; //Response Socket
	int timeout = 0;
	int sock = socket(AF_UNIX, SOCK_STREAM, 0);
	char domainsocket_Name[250] = {0};
	struct sockaddr_un address;
	sock = socket(AF_UNIX, SOCK_STREAM, 0);
	memset(&address, 0x00, sizeof(address));
	address.sun_family = AF_UNIX;
	timeout = 0; //Reset timeout
	bzero(domainsocket_Name,250); //Clear out domainsocket_Name so I can give it a new one
	strncpy(domainsocket_Name,"/var/run/mei_response1.socket",29); //IM doing this so I can easily  put in the instance number
	strncpy(address.sun_path, domainsocket_Name, strlen(domainsocket_Name));//TODO Need to domainsocket_name to integrate session number

    do
	{
	   stx = connect(sock,(struct sockaddr *)&address, sizeof(address));
	   if (timeout > 50 )
	   {
	     printf("timeout on mei response server socket connection\n");
		 return(0);
		}

	   usleep(100000);//Important Delay.
	   timeout++;

	}
	while(stx < 0);

    int rval;
	char buf[1024] = {0};
	rval = read(sock, buf, 1024);
	close(sock);
	//printf("%s\n",buf);//DEBUG
    return(buf);
}
/*
===============================================================================================================================
Add Inventory to the MYSQL database
===============================================================================================================================
*/
public: //For now this is public so I can test it

void mei_add_to_inventory_database(float value, int therow )
{

	MYSQL* conn;
	MYSQL_RES *results;
	MYSQL_ROW row;
    float total;
	float currenttotal;
    printf("The Value = %f the Row is %d", value, therow);


	conn = mysql_init(NULL);
	conn = mysql_real_connect(conn,"localhost","fkinguser101","glimpbust345","fking",0,NULL,0);
	 if(conn)
	        cout<<"connection to fking databse successful "<<endl;
	     else
	        cout<<"connection problem: "<<mysql_error(conn)<<endl;

	 if(mysql_query(conn, "SELECT * FROM inventory WHERE id = 1"))
	 	{
	 		printf("mysql: selection error: %s\n", mysql_error(conn));
	 		mysql_close(conn);
	 	}
	  results = mysql_use_result(conn);
      row = mysql_fetch_row(results);
	  printf("%s %s %s %s %s %s %s %s\n", row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7]);
	  //currenttotal = row[therow];
	  //total = currenttotal + value;
	  printf("\nthe total is %f\n",total);
	  mysql_query(conn, "UPDATE `fking`.`inventory` SET `field_1`='2.00' WHERE `id`='1'");

	  mysql_free_result(results);
	  mysql_close(conn);

	  return;

}
/*
==============================================================================================================================
End of Database Work c
==============================================================================================================================
*/
public:

void mei_shutdown(void)
{
	mei_send_command("stop"); //This will shutdown the mei service
}

};
/*
===============================================================================================================================
End of MEI Class
===============================================================================================================================
 */




















